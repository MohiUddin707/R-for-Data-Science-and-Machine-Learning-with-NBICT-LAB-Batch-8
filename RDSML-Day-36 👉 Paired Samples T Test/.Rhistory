3+4
Individual_of_rock_pegions
Data = data.frame(sites = (Kushtia,Poradah, Ishwardi), rock-pegions= c(105,80,205))
Data = data.frame(sites = ("kushtia","Poradah","Ishardi"), rock-pegions= c(105,80,205))
Data = data.frame(sites = ("kushtia","Poradah","Ishardi"), rock-pegions= c(105,80,205))
Data = data.frame(sites = c("kushtia","Poradah","Ishardi"), rock-pegions= c(105,80,205))
Data = data.frame(sites = c("kushtia","Poradah","Ishardi"), rock-pegions = c(105,80,205))
df = data.frame(dose=c("Do.5","D0.1","D0,2"),len =c(42,10,20))
Data = data.frame(sites=c("kushtia","Poradah","Ishardi"), rock-pegions = c(105,80,205))
Data = data.frame(sites=c("kushtia","Poradah","Ishardi"), rock_pegions = c(105,80,205))
View(Data)
Data = data.frame(sites=c("kushtia","Poradah","Ishardi"), rock_pegions = c(105,80,205))
library(ggplot2)
ggplot(Data,aes(x=sites,y=rock_pegions))
ggplot(Data,aes(x=sites,y=rock_pegions))+
ggplot(Data,aes(x=sites,y=rock_pegions))+
geom_point()
ggplot(Data,aes(x=sites,y=rock_pegions))+
geom_point()
Data = data.frame(sites=c("kushtia","Poradah","Ishardi"), rock_pegions = c(105,80,205))
library(ggplot2)
ggplot(Data,aes(x=sites,y=rock_pegions))+
geom_point()
setwd("C:/Users/User/Desktop/Mohi Uddin/R-for-Data-Science-and-Machine-Learning-with-NBICT-LAB-Batch-8/RDSML-Day-36 ðŸ‘‰ Paired Samples T Test")
#paired samples t-tes in R
#importing the dataset
mydata = read.csv("paired-samples-test-test.csv")
#paired samples t-tes in R
#importing the dataset
mydata = read.csv("paired-samples-t-test.csv")
#calculating the difference
diffs = mydata$curb - mydata$carb_protein
mydata = read.csv("paired-samples-t-test.csv")
#calculating the difference
diffs = mydata$curb - mydata$carb_protein
View(mydata)
#calculating the difference
diffs = mydata$curb - mydata$carb_protein
#calculating the difference
diffs = mydata$curb - mydata$carb_protein
diffs
#calculating the difference
diffs = mydata$carb - mydata$carb_protein
diffs
diffs
#checking if the differences are normal
shapiro.test(diffs)
boxplot(diffs)
t.test(x = mydata$carb, y= mydata$carb_protein, paired = TRUE)
#running the wilcoxon signed-rank test
wilcox.test(x = mydata$carb, y= mydata$carb_protein,
paired = TRUE)
#Calculating mean and sd
mean(mydata$carb)
mean(mydata$)
mean(mydata$)
mean(mydata$carb_protein)
sd(mydata$carb)
sd(mydata$carb_protein)
#effect size calculation using Cohen;s d
install.packages("effsize")
library(effsize)
cohen.d(mydata$carb, mydata$carb_protein,paired=T)
